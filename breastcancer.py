# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m_KJJHZARIs_sxx8D45znSFOh8wr9pen
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/dataset-breast-cancer-prediction.csv")

df.head()

df.columns

df = df.drop("Unnamed: 32", axis=1)

df.head()

df.columns

columns_to_drop = ['id','radius_mean', 'texture_mean', 'perimeter_mean','area_mean','fractal_dimension_mean', 'fractal_dimension_se', 'fractal_dimension_worst','concavity_mean','concavity_se','concavity_worst','radius_se', 'texture_se', 'perimeter_se', 'area_se','radius_worst', 'texture_worst']
df = df.drop(columns_to_drop, axis=1)

df.columns

type(df.columns)
l = list(df.columns)
print(l)

features_mean = l[1:11]

features_se = l[11:21]

features_worst = l[21:]

print(features_mean)

print(features_se)

print(features_worst)

df.head(5)

df['diagnosis'].unique()

sns.countplot(data=df, x='diagnosis')
plt.xlabel('Diagnosis')
plt.ylabel('Count')
plt.title('Diagnosis Count')
plt.show()

df['diagnosis'].value_counts()

df.shape

df.describe()

len(df.columns)

# Correlation Plot
corr = df.corr()
corr

corr.shape

plt.figure(figsize=(5,5))
sns.heatmap(corr);

df['diagnosis'] = df['diagnosis'].map({'M':1, 'B':0})

df.head()

df['diagnosis'].unique()

X = df.drop('diagnosis', axis=1)
X.head()

y = df['diagnosis']
y.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

df.shape

X_train.shape

X_test.shape

y_train.shape

y_test.shape

X_train.head(3)

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X_train = ss.fit_transform(X_train)
X_test = ss.transform(X_test)
X_train

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(X_train, y_train)

y_pred = lr.predict(X_test)

y_pred

y_test

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_pred)*100)